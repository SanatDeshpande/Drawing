Tool to classify user drawing into one of 5 Categories


TO RUN:
Please run in a virutal environment respecting requirements.txt using the
follwing command:
---------------------------------
pip3 install -r requirements.txt
---------------------------------
Then run the demo.py file, which will start the application on a server
connecting to http://127.0.0.1:8000/

Overview:

This application uses a simple interface to allow the user to draw an image
using their mouse, and then classifies it into one of 5 categories: Apple,
Basketball, Cookie, Clock, or Fan.

The frontend is basic javascript and html that render a canvas on which
the user can draw. The 'classify' button grabs data from the canvas, and sends
it via a post request to the backend built using Django.

The Python backend first processes this image, downsizing it to a 26x26 tile
since that's what the classifier was trained on. The tile is then passed through
the classifier, and a label is obtained. The html template the user sees is then
updated with the label.

The classifier itself is a Convolutional Neural Network with 3 convolutional
layers and 2 linear layers, and uses ReLU as an activation function. It was
trained on a dataset of 50,000 small images (26x26), each corresponding
to one of the five labeled categories. 45,000 of those images were used for
training while the remaining 5,000 were used for validation.

PLEASE DRAW LARGE, AND USE THE WHOLE CANVAS. The image is crunched down for
classificaiton, so if it is already small, then it becomes a garble of pixels.
This is an issue that is on my list of enhancements.


Bugs/ToDo:
– Make UI more appealing and user friendly...big task since it is just a bare
  bones interface right now.

- Make the label change immediately with the classification instead of forcing
  a page reload (ajax)

- Downsize image client side (or compress) to avoid sending such a large file
  in the POST request.

- Adjust for the fact that people may draw really small images, causing the 
  data to be unusable after being downsized.

– Adjust thickness of drawing line as a function of window size. Also resize
  window dynamically – don't wait for page reload